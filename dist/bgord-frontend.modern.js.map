{"version":3,"file":"bgord-frontend.modern.js","sources":["../index.tsx"],"sourcesContent":["import { useState, useEffect, useLayoutEffect, useRef } from \"react\";\n\nexport function useToggle(defaultValue = false) {\n  const [on, setIsOn] = useState(defaultValue);\n\n  const enable = () => setIsOn(true);\n  const disable = () => setIsOn(false);\n  const toggle = () => setIsOn((v) => !v);\n\n  return { on, off: !on, enable, disable, toggle };\n}\n\nexport type WindowDimensions = {\n  width: number | undefined;\n  height: number | undefined;\n};\n\nexport function useWindowDimensions(): WindowDimensions {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState<WindowDimensions>({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\nexport function useScrollLock(condition = true) {\n  useLayoutEffect(() => {\n    if (!condition) return;\n\n    const html = document.querySelector(\"html\") as HTMLElement;\n    const body = document.body;\n\n    // Get original overflows\n    const originalBodyOverflow = window.getComputedStyle(body).overflow;\n    const originalHtmlOverflow = window.getComputedStyle(html).overflow;\n\n    // Prevent scrolling on mount\n    body.style.overflow = \"hidden\";\n    html.style.overflow = \"hidden\";\n\n    // Re-enable scrolling when component unmounts\n    return () => {\n      body.style.overflow = originalBodyOverflow;\n      html.style.overflow = originalHtmlOverflow;\n    };\n  }, [condition]);\n}\n\nexport function usePreviousValue<T>(value: T) {\n  const previousValue = useRef<T | null>(null);\n\n  useEffect(() => {\n    previousValue.current = value;\n  });\n\n  return previousValue.current;\n}\n"],"names":["useToggle","defaultValue","on","setIsOn","useState","off","enable","disable","toggle","v","useWindowDimensions","windowSize","setWindowSize","width","undefined","height","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useScrollLock","condition","useLayoutEffect","html","document","querySelector","body","originalBodyOverflow","getComputedStyle","overflow","originalHtmlOverflow","style","usePreviousValue","value","previousValue","useRef","current"],"mappings":"0FAEgBA,EAAUC,GAAe,GACvC,MAAOC,EAAIC,GAAWC,EAASH,GAM/B,MAAO,CAAEC,GAAAA,EAAIG,KAAMH,EAAII,OAJR,IAAMH,GAAQ,GAIEI,QAHf,IAAMJ,GAAQ,GAGUK,OAFzB,IAAML,EAASM,IAAOA,aAUvBC,IAGd,MAAOC,EAAYC,GAAiBR,EAA2B,CAC7DS,WAAOC,EACPC,YAAQD,IAuBV,OApBAE,EAAU,KAER,SAASC,IAEPL,EAAc,CACZC,MAAOK,OAAOC,WACdJ,OAAQG,OAAOE,cAWnB,OANAF,OAAOG,iBAAiB,SAAUJ,GAGlCA,IAGO,IAAMC,OAAOI,oBAAoB,SAAUL,IACjD,IAEIN,WAGOY,EAAcC,GAAY,GACxCC,EAAgB,KACd,IAAKD,EAAW,OAEhB,MAAME,EAAOC,SAASC,cAAc,QAC9BC,EAAOF,SAASE,KAGhBC,EAAuBZ,OAAOa,iBAAiBF,GAAMG,SACrDC,EAAuBf,OAAOa,iBAAiBL,GAAMM,SAO3D,OAJAH,EAAKK,MAAMF,SAAW,SACtBN,EAAKQ,MAAMF,SAAW,SAGf,KACLH,EAAKK,MAAMF,SAAWF,EACtBJ,EAAKQ,MAAMF,SAAWC,IAEvB,CAACT,aAGUW,EAAoBC,GAClC,MAAMC,EAAgBC,EAAiB,MAMvC,OAJAtB,EAAU,KACRqB,EAAcE,QAAUH,IAGnBC,EAAcE"}