{"version":3,"file":"bgord-frontend.module.js","sources":["../index.tsx"],"sourcesContent":["import { useState, useEffect, useLayoutEffect, useRef } from \"react\";\n\nexport function useToggle(defaultValue = false) {\n  const [on, setIsOn] = useState(defaultValue);\n\n  const enable = () => setIsOn(true);\n  const disable = () => setIsOn(false);\n  const toggle = () => setIsOn((v) => !v);\n\n  return { on, off: !on, enable, disable, toggle };\n}\n\nexport type WindowDimensions = {\n  width: number | undefined;\n  height: number | undefined;\n};\n\nexport function useWindowDimensions(): WindowDimensions {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState<WindowDimensions>({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\nexport function useScrollLock(condition = true) {\n  useLayoutEffect(() => {\n    if (!condition) return;\n\n    const html = document.querySelector(\"html\") as HTMLElement;\n    const body = document.body;\n\n    // Get original overflows\n    const originalBodyOverflow = window.getComputedStyle(body).overflow;\n    const originalHtmlOverflow = window.getComputedStyle(html).overflow;\n\n    // Prevent scrolling on mount\n    body.style.overflow = \"hidden\";\n    html.style.overflow = \"hidden\";\n\n    // Re-enable scrolling when component unmounts\n    return () => {\n      body.style.overflow = originalBodyOverflow;\n      html.style.overflow = originalHtmlOverflow;\n    };\n  }, [condition]);\n}\n\nexport function usePreviousValue<T>(value: T) {\n  const previousValue = useRef<T | null>(null);\n\n  useEffect(() => {\n    previousValue.current = value;\n  });\n\n  return previousValue.current;\n}\n\nexport type UseExpandableListConfigType = { max: number; length: number };\n\nexport enum UseExpandableListState {\n  contracted = \"contracted\",\n  expanded = \"expanded\",\n}\n\nexport function useExpandableList(config: UseExpandableListConfigType) {\n  const numberOfExcessiveElements = config.length - config.max;\n  const areThereExcessiveElements = config.length > config.max;\n\n  function getState() {\n    return areThereExcessiveElements\n      ? UseExpandableListState.contracted\n      : UseExpandableListState.expanded;\n  }\n\n  const [state, setState] = useState<UseExpandableListState>(getState);\n\n  useEffect(() => setState(getState()), [config.length, config.max]);\n\n  function showMore() {\n    if (state === UseExpandableListState.contracted) {\n      setState(UseExpandableListState.expanded);\n    }\n  }\n\n  function showLess() {\n    if (state === UseExpandableListState.expanded) {\n      setState(UseExpandableListState.contracted);\n    }\n  }\n\n  function filterFn(_element: any, index: number) {\n    if (state === UseExpandableListState.expanded) return true;\n    return index < config.max;\n  }\n\n  return {\n    state,\n    displayShowMore: state === UseExpandableListState.contracted,\n    displayShowLess:\n      state === UseExpandableListState.expanded && areThereExcessiveElements,\n    showMore,\n    showLess,\n    numberOfExcessiveElements,\n    filterFn,\n  };\n}\n"],"names":["useToggle","defaultValue","useState","on","setIsOn","off","enable","disable","toggle","v","useWindowDimensions","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useScrollLock","condition","useLayoutEffect","html","document","querySelector","body","originalBodyOverflow","getComputedStyle","overflow","originalHtmlOverflow","style","usePreviousValue","value","previousValue","useRef","current","UseExpandableListState","useExpandableList","config","numberOfExcessiveElements","length","max","areThereExcessiveElements","getState","contracted","expanded","state","setState","displayShowMore","displayShowLess","showMore","showLess","filterFn","_element","index"],"mappings":"0FAEgBA,EAAUC,YAAAA,IAAAA,GAAe,GACvC,MAAsBC,EAASD,GAAxBE,OAAIC,OAMX,MAAO,CAAED,GAAAA,EAAIE,KAAMF,EAAIG,OAJR,kBAAMF,GAAQ,IAIEG,QAHf,kBAAMH,GAAQ,IAGUI,OAFzB,kBAAMJ,EAAQ,SAACK,UAAOA,eAUvBC,IAGd,MAAoCR,EAA2B,CAC7DS,WAAOC,EACPC,YAAQD,IAFHE,OAAYC,OAyBnB,OApBAC,EAAU,WAER,SAASC,IAEPF,EAAc,CACZJ,MAAOO,OAAOC,WACdN,OAAQK,OAAOE,cAWnB,OANAF,OAAOG,iBAAiB,SAAUJ,GAGlCA,sBAGaC,OAAOI,oBAAoB,SAAUL,KACjD,IAEIH,WAGOS,EAAcC,YAAAA,IAAAA,GAAY,GACxCC,EAAgB,WACd,GAAKD,EAAL,CAEA,IAAME,EAAOC,SAASC,cAAc,QAC9BC,EAAOF,SAASE,KAGhBC,EAAuBZ,OAAOa,iBAAiBF,GAAMG,SACrDC,EAAuBf,OAAOa,iBAAiBL,GAAMM,SAO3D,OAJAH,EAAKK,MAAMF,SAAW,SACtBN,EAAKQ,MAAMF,SAAW,oBAIpBH,EAAKK,MAAMF,SAAWF,EACtBJ,EAAKQ,MAAMF,SAAWC,KAEvB,CAACT,aAGUW,EAAoBC,GAClC,IAAMC,EAAgBC,EAAiB,MAMvC,OAJAtB,EAAU,WACRqB,EAAcE,QAAUH,IAGnBC,EAAcE,QAKXC,IAAAA,WAKIC,EAAkBC,GAChC,IAAMC,EAA4BD,EAAOE,OAASF,EAAOG,IACnDC,EAA4BJ,EAAOE,OAASF,EAAOG,IAEzD,SAASE,IACP,OAAOD,EACHN,EAAuBQ,WACvBR,EAAuBS,SAG7B,MAA0B/C,EAAiC6C,GAApDG,OAAOC,OAqBd,OAnBAnC,EAAU,kBAAMmC,EAASJ,MAAa,CAACL,EAAOE,OAAQF,EAAOG,MAmBtD,CACLK,MAAAA,EACAE,gBAAiBF,IAAUV,EAAuBQ,WAClDK,gBACEH,IAAUV,EAAuBS,UAAYH,EAC/CQ,SAtBF,WACMJ,IAAUV,EAAuBQ,YACnCG,EAASX,EAAuBS,WAqBlCM,SAjBF,WACML,IAAUV,EAAuBS,UACnCE,EAASX,EAAuBQ,aAgBlCL,0BAAAA,EACAa,SAbF,SAAkBC,EAAeC,GAC/B,OAAIR,IAAUV,EAAuBS,UAC9BS,EAAQhB,EAAOG,OAjC1B,SAAYL,GACVA,0BACAA,sBAFF,CAAYA,IAAAA"}